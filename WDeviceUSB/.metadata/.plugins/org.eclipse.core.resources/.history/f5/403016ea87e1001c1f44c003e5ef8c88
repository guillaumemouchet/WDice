
package ch.hearc.device.usb.use.b_logitech;

import java.util.HashMap;
import java.util.Map;

import ch.hearc.device.usb.api.generic.Component_I;

/**
* see ComponentXeox
* 
* model : Logitech Cordless RumblePad 2
*/
public enum ComponentLogitech implements Component_I
	{
BUTTON_1("0", 0, 1, 0, 1), //
BUTTON_2("1", 0, 1, 0, 1), //
BUTTON_3("2", 0, 1, 0, 1), //
BUTTON_4("3", 0, 1, 0, 1), //
BUTTON_5("4", 0, 1, 0, 1), //
BUTTON_6("5", 0, 1, 0, 1), //
BUTTON_7("6", 0, 1, 0, 1), //
BUTTON_8("7", 0, 1, 0, 1), //
BUTTON_9("8", 0, 1, 0, 1), //
BUTTON_10("9", 0, 1, 0, 1), //
BUTTON_STICK_LEFT("10", 0, 1, 0, 1), //
BUTTON_STICK_RIGHT("11", 0, 1, 0, 1), //
CROSS("pov", 0, 1, 0, 1), //
JOYSTICK_LEFT_UP_DOWN("y", -1, 1, -1, 1), //
JOYSTICK_LEFT_LEFT_RIGHT("x", -1, 1, -1, 1), //
JOYSTICK_RIGHT_UP_DOWN("rz", -1, 1, -1, 1), //
JOYSTICK_RIGHT_LEFT_RIGHT("z", -1, 1, -1, 1); //

	/*------------------------------------------------------------------*\
	|*							Constructeurs							*|
	\*------------------------------------------------------------------*/

	private ComponentLogitech(String idComponent, double minvalue, double maxValue, double minOut, double maxOut)
		{
		this.idComponent = idComponent;
		this.maxValue = maxValue;
		this.minValue = minvalue;
		this.minOut = minOut;
		this.maxOut = maxOut;
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	@Override
	public double calibrate01(double value)
		{
		return (value - minValue) / (Math.abs(minValue - maxValue)) * Math.abs(minOut - maxOut) + minOut;
		}

	/*------------------------------*\
	|*				Get				*|
	\*------------------------------*/

	@Override
	public String getIdentifier()
		{
		return this.idComponent;
		}

	/*------------------------------*\
	|*			  Static			*|
	\*------------------------------*/

	public static ComponentLogitech lookupById(String id)
		{
		createMapIdComponent();
		return mapIdComponent.get(id);
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	/*------------------------------*\
	|*			  Static			*|
	\*------------------------------*/

	private static Map<String, ComponentLogitech> createMapIdComponent()
		{
		if (mapIdComponent == null)
			{
			mapIdComponent = new HashMap<String, ComponentLogitech>();
			for(ComponentLogitech componentWireless:ComponentLogitech.values())
				{
				mapIdComponent.put(componentWireless.getIdentifier(), componentWireless);
				}
			}

		return mapIdComponent;
		}

	/*------------------------------------------------------------------*\
	|*							Attributs Private						*|
	\*------------------------------------------------------------------*/

	//Input
	private String idComponent;
	private double minValue;
	private double maxValue;
	private double minOut;
	private double maxOut;

	/*------------------------------*\
	|*			  Static			*|
	\*------------------------------*/

	//Tools
	private static Map<String, ComponentLogitech> mapIdComponent = null;

	}
