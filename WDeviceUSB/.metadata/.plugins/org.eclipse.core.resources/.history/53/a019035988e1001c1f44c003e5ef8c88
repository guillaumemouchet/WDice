
package ch.hearc.device.usb.use;

import net.java.games.input.Component;
import net.java.games.input.Controller;
import net.java.games.input.ControllerEnvironment;
import net.java.games.input.Event;
import net.java.games.input.EventQueue;

/**
 * <pre>
 * This class shows how to use the event queue system in JInput. It will show
 * how to get the controllers, how to get the event queue for a controller, and
 * how to read and process events from the queue.
 *
 * @author Endolf
 *
 * CBI : Tres utile pour fabriquer les type enum de ComponentXXX (see xeox example, interlink example, logitech interlink example...)
 * </pre>
 */
public class UseCodeDecouverte
	{

	/*------------------------------------------------------------------*\
	|*							Methodes Public							*|
	\*------------------------------------------------------------------*/

	public static void main(String[] args)
		{
		main();
		}

	public static void main()
		{
		System.out.println("[USB] : code Decouverte");
		codeDecouverte();
		}

	/*------------------------------------------------------------------*\
	|*							Methodes Private						*|
	\*------------------------------------------------------------------*/

	private static void codeDecouverte()
		{
		while(true)
			{
			Controller[] tabController = ControllerEnvironment.getDefaultEnvironment().getControllers();

			if (tabController.length == 0)
				{
				System.out.println("[USB] : Found no controllers.");
				System.exit(0);
				}

			for(int i = 0; i < tabController.length; i++)
				{
				tabController[i].poll();

				if (tabController[i].getType() == Controller.Type.GAMEPAD)
					{
					useController(tabController[i]);
					}

				if (tabController[i].getType() == Controller.Type.STICK)
					{
					useController(tabController[i]);
					}
				}

			sleep(20);
			}
		}

	private static void useController(Controller controller)
		{
		EventQueue queue = controller.getEventQueue();

		Event event = new Event();
		while(queue.getNextEvent(event))
			{

			/*
			 * Create a string buffer and put in it, the controller name,
			 * the time stamp of the event, the name of the component
			 * that changed and the new value.
			 *
			 * Note that the timestamp is a relative thing, not
			 * absolute, we can tell what order events happened in
			 * across controllers this way. We can not use it to tell
			 * exactly *when* an event happened just the order.
			 */
			StringBuffer buffer = new StringBuffer();
			buffer.append(controller.getName());
			buffer.append(" at ");
			buffer.append(event.getNanos());
			buffer.append(", ");
			
			Component component = event.getComponent();
			buffer.append(component.getIdentifier().getName());
			buffer.append(" changed to ");
			
			float value = event.getValue();
			buffer.append(value);

			System.out.println("[USB] : " + buffer.toString());
			}
		}

	/*------------------------------*\
	|*			  Tools				*|
	\*------------------------------*/

	private static void sleep(int ms)
		{
		try
			{
			Thread.sleep(ms);
			}
		catch (InterruptedException e)
			{
			e.printStackTrace();
			}
		}

	}
